@page "/mycontracts"
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthState
@inject IDialogService DialogService
@using System.Text.Json
@using System.Text
@inject ISnackbar Snackbar

<MudText Typo="Typo.h2" Align="Align.Center" Style="margin-bottom:30px">My contracts</MudText>

@if (ContractList != null && ContractList.Results != null && ContractList.Results.Count() != 0)
{
    <div class="row">
        <div class="col-md-12">
            <MudExpansionPanels MultiExpansion="true">
                @foreach (var contract in ContractList.Results)
                {
                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex">
                                <MudIcon Icon="@Icons.Material.Filled.Info" class="mr-3"></MudIcon>
                                <MudText>Contract - <strong>#@contract.Id</strong> - @contract.Date.ToString("yyyy.MM.dd.")</MudText>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <div class="row" style="margin:10px">
                                <div class="col-md-6">
                                    <MudText Typo="Typo.h6">Name</MudText>
                                </div>
                                <div class="col-md-6">
                                    <MudText Typo="Typo.h6">@Name</MudText>
                                </div>
                            </div>
                            <div class="row" style="margin:10px">
                                <div class="col-md-6">
                                    <MudText Typo="Typo.h6">Fee percentage:</MudText>
                                </div>
                                <div class="col-md-6">
                                    <MudText Typo="Typo.h6">@contract.FeePercentage.ToString("P2", System.Globalization.CultureInfo.InvariantCulture)</MudText>
                                </div>
                            </div>
                            <div class="row" style="margin:10px">
                                <div class="col-md-6">
                                    <MudText Typo="Typo.h6">Payment frequency:</MudText>
                                </div>
                                <div class="col-md-6">
                                    <MudText Typo="Typo.h6">@contract.PaymentFrequency month</MudText>
                                </div>
                            </div>
                            <div class="row" style="margin:10px">
                                <div class="col-md-6">
                                    <MudText Typo="Typo.h6">Payment method:</MudText>
                                </div>
                                <div class="col-md-6">
                                    <MudText Typo="Typo.h6">@contract.PaymentMethod.GetDisplayName()</MudText>
                                </div>
                            </div>
                            <div class="row d-flex justify-content-around">
                                @if (!contract.IsSigned)
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="c => Sign(contract)" Style="margin:10px">Sign</MudButton>
                                }
                                @if (!contract.IsPaid && contract.IsSigned)
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="c => Pay(contract)" Style="margin:10px">Pay</MudButton>
                                }
                            </div>
                        </ChildContent>
                    </MudExpansionPanel>
                }

            </MudExpansionPanels>
        </div>
    </div>
    <div class="d-flex justify-content-around">
        @if (PageNumber == 1)
        {
            <MudIconButton Icon="@Icons.Material.Filled.ArrowLeft" Color="Color.Secondary" Disabled="true"></MudIconButton>
        }
        else
        {
            <MudIconButton Icon="@Icons.Material.Filled.ArrowLeft" Color="Color.Secondary" OnClick="c => PageLeft()"></MudIconButton>
        }
        @if (ContractList.Results.Count() < PageSize)
        {
            <MudIconButton Icon="@Icons.Material.Filled.ArrowRight" Color="Color.Secondary" Disabled="true"></MudIconButton>
        }
        else
        {
            <MudIconButton Icon="@Icons.Material.Filled.ArrowRight" Color="Color.Secondary" OnClick="c => PageRight()"></MudIconButton>
        }

    </div>
}
@foreach (var claim in ClaimsPrincipal.Claims)
{
    <p>
        @claim.Type :
    </p>
    <p>
        @claim.Value
    </p>
}
@code {

    PagedResult<ContractDto> ContractList { get; set; } = new PagedResult<ContractDto>();

    public int PageSize { get; set; } = 8;
    public int PageNumber { get; set; } = 1;
    public string UserId { get; set; } = "";
    public string Name { get; set; } = "";

    public System.Security.Claims.ClaimsPrincipal ClaimsPrincipal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var http = HttpClientFactory.CreateClient("Eagency.Web.ServerAPI");

        var auth = await AuthState.GetAuthenticationStateAsync();
        var claimsPrincipal = auth.User;

        ClaimsPrincipal = auth.User;

        UserId = claimsPrincipal.FindFirst(x => x.Type.Equals("sub")).Value;
        var nameclaim = claimsPrincipal.Claims.Where(x => x.Type == "AllName").Select(c => c.Value).SingleOrDefault();
        if (nameclaim != null)
        {
            Name = nameclaim;
        }

        ContractList = await http.GetFromJsonAsync<PagedResult<ContractDto>>($"api/Contract/userid/{UserId}?pagesize={PageSize}&pagenumber={PageNumber}");
    }

    public async Task Pay(ContractDto contract)
    {
        bool? dialogresult = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to pay?",
            yesText: "Yes", cancelText: "No");
        if (dialogresult != null)
        {
            var http = HttpClientFactory.CreateClient("Eagency.Web.ServerAPI");
            var result = await http.PatchAsync($"api/Contract/{contract.Id}/paid?ispaid=true", null);
            if (result.IsSuccessStatusCode)
            {
                contract.IsPaid = true;
                Snackbar.Add("Successful payment.", Severity.Success);
            } else
            {
                Snackbar.Add("Error: payment failed.", Severity.Error);
            }

        }

    }

    public async Task Sign(ContractDto contract)
    {
        bool? dialogresult = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to sign it?",
            yesText: "Yes", cancelText: "No");
        if (dialogresult != null)
        {
            var http = HttpClientFactory.CreateClient("Eagency.Web.ServerAPI");
            var result = await http.PatchAsync($"api/Contract/{contract.Id}/sign", null);
            if (result.IsSuccessStatusCode)
            {
                contract.IsSigned = true;
                Snackbar.Add("Successful signature.", Severity.Success);
            } else
            {
                Snackbar.Add("Error: signature failed.", Severity.Error);
            }

        }

    }

    public async Task PageLeft()
    {
        PageNumber--;
        var http = HttpClientFactory.CreateClient("Eagency.Web.ServerAPI");
        ContractList = new PagedResult<ContractDto>();
        ContractList = await http.GetFromJsonAsync<PagedResult<ContractDto>>($"api/Contract/userid/{UserId}?pagesize={PageSize}&pagenumber={PageNumber}");
    }

    public async Task PageRight()
    {
        PageNumber++;
        var http = HttpClientFactory.CreateClient("Eagency.Web.ServerAPI");
        ContractList = new PagedResult<ContractDto>();
        ContractList = await http.GetFromJsonAsync<PagedResult<ContractDto>>($"api/Contract/userid/{UserId}?pagesize={PageSize}&pagenumber={PageNumber}");
    }
}
