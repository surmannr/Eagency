@page "/create-property"
@layout AdminLayout
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager uriHelper
@inject AuthenticationStateProvider AuthState
@using Eagency.Web.Shared.Enums
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.IO
@using Microsoft.AspNetCore.Hosting;
@using Microsoft.Extensions.Hosting;


<MudText Typo="Typo.h2" Align="Align.Center" Style="margin-bottom:30px">Create a property</MudText>

<div class="row d-flex justify-content-center">
    <div class="col-md-8">
        <MudCard>
            <MudCardContent>
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudTextField T="string" Label="Street" Required="true" RequiredError="Street is required!" @bind-Value="newProperty.Street" />
                    <MudTextField T="string" Label="City" Required="true" RequiredError="City is required!" @bind-Value="newProperty.City" />
                    <MudTextField T="string" Label="Country" Required="true" RequiredError="Country is required!" @bind-Value="newProperty.Country" />
                    <MudNumericField Min="1" T="int" Label="ZipCode" Required="true" RequiredError="ZipCode id is required!" @bind-Value="@newProperty.ZipCode" />
                    <MudNumericField Min="0" T="int" Label="Number of bedrooms" Required="true" RequiredError="Number of bedrooms is required!" @bind-Value="@newProperty.NumberOfBedrooms" />
                    <MudNumericField Min="0" T="int" Label="Number of bathrooms" Required="true" RequiredError="Number of bathrooms is required!" @bind-Value="@newProperty.NumberOfBathrooms" />
                    <MudNumericField Min="0" T="int" Label="Number of garages" Required="true" RequiredError="Number of garages is required!" @bind-Value="@newProperty.NumberOfGarages" />
                    <MudNumericField Min="0" T="int" Label="Number of parking spaces" Required="true" RequiredError="Number of parking spaces is required!" @bind-Value="@newProperty.NumberOfParkingSpaces" />
                    <MudNumericField Min="0" T="int" Label="Area" Required="true" RequiredError="Area is required!" @bind-Value="@newProperty.Area" />
                    <MudNumericField Min="0" T="int" Label="Price" Required="true" RequiredError="Price is required!" @bind-Value="@newProperty.Price" />
                    <MudSelect T="HouseType" @bind-Value="@newProperty.HouseType" Label="Select payment method" Variant="Variant.Outlined" ToStringFunc="@converter" OffsetY="true">
                        <MudSelectItem Value="@(HouseType.Detached)" />
                        <MudSelectItem Value="@(HouseType.Apartment)" />
                        <MudSelectItem Value="@(HouseType.Mediterranean)" />
                        <MudSelectItem Value="@(HouseType.Cottage)" />
                        <MudSelectItem Value="@(HouseType.Colonial)" />
                        <MudSelectItem Value="@(HouseType.Craftsman)" />
                        <MudSelectItem Value="@(HouseType.Contemporary)" />
                        <MudSelectItem Value="@(HouseType.Ranch)" />
                        <MudSelectItem Value="@(HouseType.Farmhouse)" />
                        <MudSelectItem Value="@(HouseType.Townhome)" />
                    </MudSelect>
                    <MudCheckBox T="bool" Class="ml-n2" Label="Is that furnished?" @bind-Value="@newProperty.IsFurnished" />
                    <MudTextField T="string" Label="Multiline" Variant="Variant.Text" Lines="8" @bind-Value="@newProperty.Description" />
                    <MudItem xs="6">

                        <MudText Typo="@Typo.h6">Feltöltött fájl:</MudText>
                        @if (browserFile != null)
                        {
                            <MudIcon Icon="@Icons.Filled.AttachFile"></MudIcon> @browserFile.Name <code>@browserFile.Size bytes</code>
                        }

                    </MudItem>
                    <MudItem xs="6" Style="justify-content:flex-end; display:flex">

                        <InputFile id="fileInput" OnChange="UploadFile" hidden multiple accept=".jpg, .jpeg, .png" />

                        <MudIconButton HtmlTag="label"
                                       Color="Color.Info"
                                       Icon="@Icons.Filled.PhotoCamera"
                                       for="fileInput">
                        </MudIconButton>
                    </MudItem>
                </MudForm>
            </MudCardContent>
            <MudCardActions Class="d-flex flex-column">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" FullWidth="true" Style="margin-bottom:10px" OnClick="CreateNewProperty">Create a new property</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="Back">Cancel</MudButton>
            </MudCardActions>
        </MudCard>

        <MudPaper Class="pa-4 justify-center my-4 mud-text-align-center">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(()=>form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
        </MudPaper>

        <MudExpansionPanels>
            <MudExpansionPanel Text="@($"Show Errors ({errors.Length})")">
                @foreach (var error in errors)
                {
                    <MudText Color="@Color.Error">@error</MudText>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>
    </div>
</div>


@code {
    bool success;
    string[] errors = { };
    MudForm form;

    PropertyDto newProperty { get; set; } = new PropertyDto();

    Func<HouseType, string> converter = p => p.GetDisplayName();

    IBrowserFile browserFile { get; set; }


    private void UploadFile(InputFileChangeEventArgs e)
    {
        foreach (var a in e.GetMultipleFiles())
        {
            browserFile = a;
        }
    }

    public async Task CreateNewProperty()
    {
        var http = HttpClientFactory.CreateClient("Eagency.Web.ServerAPI");
        newProperty.Sold = false;

        var auth = await AuthState.GetAuthenticationStateAsync();
        var claimsPrincipal = auth.User;
        var UserId = claimsPrincipal.FindFirst(x => x.Type.Equals("sub")).Value;
        newProperty.AgentId = UserId;
        newProperty.ImageName = Guid.NewGuid().ToString() + ".jpg";

        var result = await http.PostAsJsonAsync($"api/Property", newProperty);
        if (result.IsSuccessStatusCode)
        {
            if (browserFile != null)
            {
                var resizedFile = await browserFile.RequestImageFileAsync("image/png", 500, 500);
                using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
                {
                    var content = new MultipartFormDataContent();
                    content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
                    content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", newProperty.ImageName);
                    var response = await http.PostAsync("api/Property/upload", content);
                }
            }
            Snackbar.Add("Successful property creation.", Severity.Success);
            await Task.Delay(1000);
            uriHelper.NavigateTo("/manage-properties", forceLoad: true);
        }
        else
        {
            Snackbar.Add("Error: can not create the new property.", Severity.Error);
        }
    }

    public void Back()
    {
        uriHelper.NavigateTo("/manage-properties");
    }



}
